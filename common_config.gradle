// Top-level build file where you can add configuration options common to all sub-projects/modules.
project.ext {
    compileSdkVersion25 = 25
    buildToolsVersion25 = "25.0.2"
    minSdkVersion14 = 14
    targetSdkVersion25 = 25
    applicationId = "material.com.gank"
    isDebug = false;
    isLib = false;
    isSettingDebug = false;
    isNewsDebug = false;

    //设置App配置
    setAppDefaultConfig = {
        extension->
            extension.apply plugin: 'com.android.application'
            extension.description "app"
            extension.android.defaultConfig{
                applicationId applicationId+"."+extension.getName()
            }
            setAndroidConfig extension.android
            setDependencies extension.dependencies
            setIgnoreTask extension

            extension.gradle.addListener new TimingsListener()
    }

    //设置Lib配置
    setLibDefaultConfig = {
        extension ->
            extension.apply plugin: 'com.android.library'
            extension.description "lib"
            setAndroidConfig extension.android
            setDependencies extension.dependencies
            setIgnoreTask extension
    }

    setDefaultConfig = {
        extension->
            setAndroidConfig extension.android
            setDependencies extension.dependencies
    }

    //设置Android配置
    setAndroidConfig ={
        extension->
            extension.compileSdkVersion 25
            extension.buildToolsVersion "25.0.2"
            extension.defaultConfig {
                minSdkVersion 15
                targetSdkVersion 25

                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
                javaCompileOptions {
                    annotationProcessorOptions {
                        arguments = [ moduleName : extension.project.getName() ]
                    }
                }
            }

//            extension.dataBinding{
//                enabled = true
//            }
    }

    //设置依赖
    setDependencies = {
        extension->
            extension.compile fileTree(dir: 'libs', include: ['*.jar'])
            extension.annotationProcessor 'com.alibaba:arouter-compiler:1.1.1'
    }

    //简化编译任务
    setIgnoreTask = {
        extension->
            extension.tasks.whenTaskAdded { task ->
                if (task.name.contains("lint")//如果instant run不生效，把clean这行干掉
                        ||task.name.equals("clean")//项目中有用到aidl则不可以舍弃这个任务
                        ||task.name.contains("Aidl")//用不到测试的时候就可以先关闭
                        ||task.name.contains("mockableAndroidJar")
                        ||task.name.contains("UnitTest")
                        ||task.name.contains("AndroidTest")//用不到NDK和JNI的也关闭掉
                        || task.name.contains("Ndk")
                        || task.name.contains("Jni")
                ) {
                    task.enabled = false
                }
            }
    }

}

class TimingsListener implements TaskExecutionListener, BuildListener {
    private Clock clock
    private timings = []

    //记录Task起始时间
    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
    }

    //打印耗时，并记录起来
    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    //编译结束后，打印耗时任务
    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}
